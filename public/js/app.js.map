{"version":3,"sources":["app.js","app.config.js","app.routes.js","apiService.js","arbol/controllers/arbolCtrl.js","trabajadores/controllers/crearTrabajadorCtrl.js","trabajadores/controllers/editarTrabajadorCtrl.js","trabajadores/controllers/listarTrabajadoresCtrl.js"],"names":[],"mappingsxfile":"app.js","sourcesContent":["'use strict';\n\n\nangular.module('app', [\n    'ui.router',\n    'toastr',\n    'validation',\n    'validation.rule',\n    'datatables',\n    'datatables.bootstrap',\n    'datatables.select',\n    'ngSanitize'\n]);","var app = angular.module('app')\n    .config(['$validationProvider', 'toastrConfig',\n        function ($validationProvider, toastrConfig) {\n\n            angular.extend(toastrConfig, {\n                positionClass: 'toast-bottom-right',\n            });\n\n            $validationProvider.showSuccessMessage = false;\n            $validationProvider.setErrorHTML(function (msg) {\n                return \"<div> <label class=\\\"control-label text-danger\\\">\" + msg + \"</label></div>\";\n            });\n\n            $validationProvider.setDefaultMsg({\n                required: {\n                    error: 'Campo requerido',\n                    success: 'Thanks!'\n                },\n                minlength: {\n                    error: 'El campo debe contener m√°s caracteres',\n                    success: 'Thanks!'\n                },\n                maxlength: {\n                    error: 'El campo debe contener menos caracteres',\n                    success: 'Thanks!'\n                },\n                email: {\n                    error: 'El formato del email es incorrecto'\n                }\n            });\n\n\n            $validationProvider.setExpression({\n                cedula: /^^[[V|E|J|G]\\d\\d\\d\\d\\d\\d\\d?\\d?]{0,9}$/,\n\n            }).setDefaultMsg({\n                cedula: {\n                    error: 'El formato de la cedula es incorrecto debe ser V|E|J|G00000000',\n                },\n            });\n        }\n    ])\n    .run(['$rootScope',\n        function ($rootScope) {\n\n        }]);\n","angular.module('app')\n    .config(['$stateProvider', '$urlRouterProvider',\n        function ($stateProvider, $urlRouterProvider) {\n            $stateProvider\n                .state('trabajadores', {\n                    url: '/trabajadores',\n                    template: '<div ui-view></div>',\n                })\n                .state('trabajadores.listar', {\n                    url: '/listar',\n                    controller: 'listarTrabajadoresCtrl as listarVm',\n                    templateUrl: 'html/trabajadores/views/listarTrabajadores.html',\n                })\n                .state('trabajadores.nuevo', {\n                    url: '/nuevo',\n                    controller: 'crearTrabajadorCtrl as verVm',\n                    templateUrl: 'html/trabajadores/views/verTrabajador.html',\n                })\n                .state('trabajadores.editar', {\n                    url: '/editar/{id}',\n                    controller: 'editarTrabajadorCtrl as verVm',\n                    templateUrl: 'html/trabajadores/views/verTrabajador.html',\n                })\n                .state('arbol', {\n                    url: '/arbol',\n                    controller: 'arbolCtrl as arbolVm',\n                    templateUrl: 'html/arbol/views/arbol.html',\n                })\n        }]);\n","'use strict';\n\nvar app = angular.module('app');\n\n// $http: para conexion con la API\n// $q: para utilizar promesas\n// $localStorage: para almacenar datos, en este caso los datos del usuario\n//                en sesion tal como el token de usuario\n// $base64: para encriptar datos\n// : constante que contiene la ruta del \nvar injectParams = ['$http', '$q'];\n\nvar factory = function ($http, $q) {\n\n    factory = {};\n\n    // Utilizada para obtener cualquier array desde el \n    // url: parametro que especifica el recurso que se desea consumir de la API\n    // include: si se desean incluir parametros adicionales\n    factory.getAll = function (url, include) {\n\n        // Se inicia la promesa\n        var defered = $q.defer();\n        var promise = defered.promise;\n\n        var hasPage = url.indexOf('page') !== -1;\n        if (include) {\n            include = hasPage ? '&include=' + include : '?include=' + include;\n        } else {\n            include = '';\n        }\n\n        // Si no se desea pasar como parametros el token de usuario se comenta la siguiente linea\n        $http.get(url + include)\n            .success(function (results) {\n                defered.resolve(results);\n            })\n            .error(function (err) {\n                defered.reject(err);\n            });\n\n        return promise;\n    };\n\n    // Obtiene un objeto json en especifico dado un id\n    factory.getOne = function (id, url, include) {\n\n        var defered = $q.defer();\n        var promise = defered.promise;\n\n        if (include) {\n            include = '?include=' + include;\n        } else {\n            include = '';\n        }\n\n        url = url + \"/\";\n\n        $http.get(url + id + include)\n            .success(function (results) {\n                defered.resolve(results);\n            })\n            .error(function (err) {\n                defered.reject(err);\n            });\n\n        return promise;\n    };\n\n    // Solicita eliminar un registro dado un id a la API\n    factory.remove = function (id, url) {\n\n        var defered = $q.defer();\n        var promise = defered.promise;\n\n        url = url + \"/\";\n\n        $http.delete(url + id)\n            .success(function (status) {\n                defered.resolve(status.data);\n                //project.id = results.data.id;\n                //return results.data;\n            })\n            .error(function (err) {\n                defered.reject(err);\n            });\n\n        return promise;\n\n    };\n\n    factory.removeMany = function (ids, url) {\n\n        var defered = $q.defer();\n        var promise = defered.promise;\n\n        $http.delete(url + '/id/' + ids)\n            .success(function (status) {\n                defered.resolve(status.data);\n                //project.id = results.data.id;\n                //return results.data;\n            })\n            .error(function (err) {\n                defered.reject(err);\n            });\n\n        return promise;\n\n    };\n\n    // Solicita a la API guardar un objeto json\n    factory.save = function (object, url) {\n\n        var defered = $q.defer();\n        var promise = defered.promise;\n\n        $http.post(url, object)\n            .success(function (results) {\n                defered.resolve(results);\n\n            })\n            .error(function (err) {\n                defered.reject(err);\n            });\n\n        return promise;\n\n    };\n\n    // Solicita a la API guardar un objeto json\n    factory.create = function (object, url) {\n\n        var defered = $q.defer();\n        var promise = defered.promise;\n\n        $http.post(url, object)\n            .success(function (results) {\n                defered.resolve(results);\n\n            })\n            .error(function (err) {\n                defered.reject(err);\n            });\n\n        return promise;\n\n    };\n\n    // Solicita a la API actualizar un objeto json dado un id\n    factory.update = function (id, object, url) {\n\n        var defered = $q.defer();\n        var promise = defered.promise;\n\n        url = url + \"/\";\n\n        $http.put(url + id, object)\n            .success(function (results) {\n                defered.resolve(results);\n\n            })\n            .error(function (err) {\n                defered.reject(err);\n            });\n\n        return promise;\n\n    };\n\n    factory.uploadFile = function (url, file) {\n        var defered = $q.defer();\n        var promise = defered.promise;\n\n        var formData = new FormData();\n\n        formData.append(\"file\", file);\n\n        return $http.post(url, formData, {\n            headers: {\n                \"Content-type\": undefined\n            },\n            transformRequest: formData\n        })\n            .success(function (res) {\n                defered.resolve(res);\n            })\n            .error(function (msg, code) {\n                defered.reject(msg);\n            })\n\n        return promise;\n    }\n\n    return factory;\n\n};\n\nfactory.$inject = injectParams;\n\napp.factory('apiService', factory);\n","angular.module('app')\n    .controller('arbolCtrl', ['apiService', 'toastr', '$scope', function (apiService, toastr, $scope) {\n        var arbolVm = this;\n        arbolVm.data = [\n            {'id': 0, 'padreid': null, 'nombre': 'Carros'},\n            {'id': 1, 'padreid': null, 'nombre': 'Computadoras'},\n            {'id': 2, 'padreid': 0, 'nombre': 'Rines'},\n            {'id': 3, 'padreid': 2, 'nombre': 'Perfil Bajo'},\n            {'id': 4, 'padreid': 3, 'nombre': 'Lujo'},\n            {'id': 5, 'padreid': 0, 'nombre': 'Repuestos'},\n            {'id': 6, 'padreid': 4, 'nombre': 'momo'},\n            {'id': 7, 'padreid': 1, 'nombre': 'software'},\n            {'id': 8, 'padreid': 5, 'nombre': 'Motores'},\n            {'id': 9, 'padreid': 7, 'nombre': 'Juegos'},\n            {'id': 10, 'padreid': 7, 'nombre': 'Administrativos'},\n            {'id': 11, 'padreid': null, 'nombre': 'Animales'},\n            {'id': 12, 'padreid': 1, 'nombre': 'Hardware'},\n            {'id': 13, 'padreid': 11, 'nombre': 'Perros'},\n            {'id': 14, 'padreid': 11, 'nombre': 'Gatos'},\n            {'id': 15, 'padreid': null, 'nombre': 'Hogar'},\n            {'id': 16, 'padreid': 9, 'nombre': 'Estrategia'},\n            {'id': 17, 'padreid': 9, 'nombre': 'Rol'}\n        ];\n        arbolVm.procesando = false;\n\n        arbolVm.dataStr = JSON.stringify(arbolVm.data);\n\n        arbolVm.generar = function () {\n            try {\n                arbolVm.data = JSON.parse(arbolVm.dataStr);\n                arbolVm.html = '';\n                arbolVm.procesando = true;\n                apiService.create(arbolVm.data, 'api/arbol').then(function (response) {\n                    arbolVm.html = response.data.html;\n                    toastr.success('El √°rbol fue generado con exito', 'Exito')\n                }).catch(function (err) {\n                    toastr.error(err.error.mensaje)\n                }).finally(function () {\n                    arbolVm.procesando = false\n                })\n            } catch (e) {\n                toastr.error('El formato de la data es incorrecto, este debe ser un string Json valido.', 'Error')\n            }\n        }\n    }]);","angular.module('app')\n    .controller('crearTrabajadorCtrl', ['apiService', 'toastr', '$state', function (apiService, toastr, $state) {\n        var verVm = this;\n        verVm.editar = false;\n        verVm.procesando = false;\n        verVm.trabajador = {};\n        verVm.cargos = [];\n        cargarCargos();\n        function cargarCargos() {\n            apiService.getAll('api/cargos').then(function (response) {\n                verVm.cargos = response;\n            })\n        }\n\n        verVm.guardar = function () {\n            verVm.procesando = true;\n            apiService.create(verVm.trabajador, 'api/trabajadores').then(function (response) {\n                toastr.success('El trabajador se creo satisfactoriamente', 'Exito')\n                $state.go('trabajadores.listar');\n\n            }).catch(function (err) {\n                angular.forEach(err, function (error, key) {\n                    toastr.error(error[0], 'Error')\n                });\n            }).finally(function () {\n                verVm.procesando = false;\n            });\n        };\n    }]);","angular.module('app')\n    .controller('editarTrabajadorCtrl', ['apiService', 'toastr', '$state', '$stateParams', function (apiService, toastr, $state, $stateParams) {\n        var verVm = this\n        verVm.editar = true;\n        verVm.procesando = false;\n        verVm.trabajador = {};\n        cargarCargos();\n        cargarTrabajador($stateParams.id);\n\n        function cargarCargos() {\n            apiService.getAll('api/cargos').then(function (response) {\n                verVm.cargos = response;\n            })\n        }\n\n        function cargarTrabajador(id) {\n            var url = \"api/trabajadores\";\n            verVm.procesando = true;\n\n            apiService.getOne(id, url)\n                .then(function (response) {\n                    verVm.trabajador = response.data;\n                })\n                .catch(function (err) {\n                    toastr.error(err.error.mensaje, 'error')\n                }).finally(function () {\n                verVm.procesando = false;\n\n            });\n        }\n\n        verVm.guardar = function () {\n            verVm.procesando = true;\n\n            apiService.update($stateParams.id, verVm.trabajador, 'api/trabajadores')\n                .then(function (response) {\n                    toastr.success('El trabajador se actualizo satisfactoriamente', 'Exito');\n                    $state.go('trabajadores.listar');\n\n                }).catch(function (err) {\n                angular.forEach(err, function (error, key) {\n                    toastr.error(error[0], 'Error')\n                }).finally(function () {\n                    verVm.procesando = false;\n                });\n            })\n        };\n\n        verVm.eliminar = function () {\n            var url = \"api/trabajadores\";\n            var confirm = window.confirm(\"¬øEsta seguro de eliminar este registro?\");\n            if (confirm == true) {\n                verVm.procesando = true;\n                apiService.remove($stateParams.id, url).then(function (data) {\n                    toastr.success('Trabajador eliminado con exito');\n                    $state.go('trabajadores.listar');\n                }).catch(function (err) {\n                    toastr.error(err.errors[0].message, 'Error');\n                }).finally(function () {\n                    verVm.procesando = false;\n                });\n            }\n        };\n    }]);","angular.module('app')\n    .controller('listarTrabajadoresCtrl', ['apiService', 'toastr', 'DTOptionsBuilder', 'DTColumnBuilder', '$compile', '$scope', function (apiService, toastr, DTOptionsBuilder, DTColumnBuilder, $compile, $scope) {\n        var listarVm = this\n        listarVm.dtInstance = {};\n\n\n        listarVm.dtOptions = DTOptionsBuilder.newOptions()\n            .withOption('ajax', {\n                url: 'api/trabajadores',\n                type: 'GET'\n            })\n            .withOption('processing', true)\n            .withOption('serverSide', true)\n            .withBootstrap()\n            .withOption('language', {\n                url: '/js/es.json'\n            })\n            .withOption('createdRow', createdRow)\n            .withDataProp('data');\n\n        listarVm.dtColumns = [\n            DTColumnBuilder.newColumn('cedula').withTitle('C√©dula').renderWith(cedulaHtml),\n            DTColumnBuilder.newColumn('nombre').withTitle('Nombre').renderWith(nombreHtml),\n            DTColumnBuilder.newColumn('apellido').withTitle('Apellido').renderWith(apellidoHtml),\n            DTColumnBuilder.newColumn('email').withTitle('Email'),\n            DTColumnBuilder.newColumn('cargo.nombre').withTitle('Cargo'),\n            DTColumnBuilder.newColumn('activo').withTitle('Activo').renderWith(activoHtml),\n            DTColumnBuilder.newColumn('acciones').withTitle('Acciones').renderWith(accionesHtml).withOption('width', '340px'),\n        ];\n\n        function createdRow(row, data, dataIndex) {\n            $compile(angular.element(row).contents())($scope);\n        }\n\n        function cedulaHtml(data, type, full, meta) {\n            return '<a ui-sref=\"trabajadores.editar({ id: ' + full.id + ' })\">' + full.cedula + '</a>';\n        }\n\n        function apellidoHtml(data, type, full, meta) {\n            return '<a ui-sref=\"trabajadores.editar({ id: ' + full.id + ' })\">' + full.apellido + '</a>';\n        }\n\n        function nombreHtml(data, type, full, meta) {\n            return '<a ui-sref=\"trabajadores.editar({ id: ' + full.id + ' })\">' + full.nombre + '</a>';\n\n        }\n\n        function accionesHtml(data, type, full, meta) {\n            var text = full.activo ? 'Desactivar' : 'Activar';\n            var icon = full.activo ? 'fa-circle-o' : 'fa-check-circle';\n            var btn = full.activo ? 'btn-info' : 'btn-success';\n            return '<div class=\"actions-btn\"> ' +\n                '<a class=\"btn btn-sm btn-warning\" ui-sref=\"trabajadores.editar({id:' + full.id + '})\"><i class=\"fa fa-pencil\"></i> Editar</a> &nbsp;' +\n                '<a class=\"btn btn-sm btn-danger\" ng-click=\"listarVm.eliminar(' + full.id + ')\"><i class=\"fa fa-trash\"></i> Eliminar</a> &nbsp;' +\n                '<a class=\"btn btn-sm ' + btn + '\" ng-click=\"listarVm.activacion(' + full.id + ',' + full.activo + ')\"><i class=\"fa ' + icon + '\"></i> ' + text + '</a>' +\n                '</div>';\n\n        }\n\n        function activoHtml(data, type, full, meta) {\n            var icon = full.activo ? 'fa-check-circle' : 'fa-circle-o';\n            var text = full.activo ? 'text-success' : 'text-danger';\n            return \"<i class='fa fa-2x \" + icon + \" \" + text + \"'></i>\";\n        }\n\n        listarVm.eliminar = function (id) {\n            var url = \"api/trabajadores\";\n\n            if (id) {\n                var confirm = window.confirm(\"¬øEsta seguro de eliminar este registro?\");\n                if (confirm == true) {\n                    apiService.remove(id, url)\n                        .then(function (data) {\n                            toastr.success('Registro eliminado con exito');\n                            listarVm.dtInstance.reloadData();\n                        })\n                        .catch(function (err) {\n                            toastr.error(err.errors[0].message, 'Error');\n                        })\n                }\n            } else {\n                toastr.warning('Debe seleccionar un trabajador antes de continuar')\n            }\n        };\n\n        listarVm.activacion = function (id, activo) {\n            var url = \"api/trabajadores/activacion\";\n\n            if (id) {\n                apiService.update(id, {}, url)\n                    .then(function (data) {\n                        if (activo) {\n                            toastr.success('Trabajador desactivado con exito');\n                        } else {\n                            toastr.success('Trabajador activado con exito');\n\n                        }\n                        listarVm.dtInstance.reloadData();\n                    })\n                    .catch(function (err) {\n                        toastr.error(err.errors[0].message, 'Error');\n                    })\n            } else {\n                toastr.warning('Debe seleccionar un trabajador antes de continuar')\n            }\n        };\n    }]);"],"sourceRoot":"/source/"}