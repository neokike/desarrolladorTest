{"version":3,"sources":["app.js","app.config.js","app.routes.js","apiService.js","crearTrabajadoresCtrl.js","listarTrabajadoresCtrl.js","editarTrabajadoresCtrl.js"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AC3CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACdfile":"app.js","sourcesContent":["'use strict';\n\n\nangular.module('app', [\n    'ui.router',\n    'toastr',\n    'validation',\n    'validation.rule',\n    'datatables',\n    'datatables.bootstrap',\n]);","var app = angular.module('app')\n    .config(['$validationProvider',\n        function ($validationProvider) {\n\n            $validationProvider.showSuccessMessage = false;\n            $validationProvider.setErrorHTML(function (msg) {\n                return \"<div> <label class=\\\"control-label has-error\\\">\" + msg + \"</label></div>\";\n            });\n\n            $validationProvider.setDefaultMsg({\n                required: {\n                    error: 'Campo requerido',\n                    success: 'Thanks!'\n                },\n                minlength: {\n                    error: 'El campo debe contener m√°s caracteres',\n                    success: 'Thanks!'\n                },\n                maxlength: {\n                    error: 'El campo debe contener menos caracteres',\n                    success: 'Thanks!'\n                },\n                number: {\n                    error: 'Debe ser un numero positivo'\n                }\n            });\n\n\n            $validationProvider.setExpression({\n                requiredorzero: function (value) {\n                    return value === 0 ? true : !!value;\n                },\n            }).setDefaultMsg({\n                requiredorzero: {\n                    error: 'Campo requerido',\n                },\n            });\n        }\n    ])\n    .run(['$rootScope',\n        function ($rootScope) {\n\n    }]);\n","angular.module('app')\n    .config(['$stateProvider', '$urlRouterProvider',\n        function ($stateProvider, $urlRouterProvider) {\n            $stateProvider\n                .state('trabajadores', {\n                    url: '/trabajadores',\n                    template: '<div ui-view></div>',\n                })\n                .state('trabajadores.listar', {\n                    url: '/listar',\n                    controller: 'listarTrabajadoresCtrl as listarVm',\n                    templateUrl: 'html/listarTrabajadores.html',\n                })\n        }]);\n","'use strict';\n\nvar app = angular.module('app');\n\n// $http: para conexion con la API\n// $q: para utilizar promesas\n// $localStorage: para almacenar datos, en este caso los datos del usuario\n//                en sesion tal como el token de usuario\n// $base64: para encriptar datos\n// $localStorage.backend: constante que contiene la ruta del $localStorage.backend\nvar injectParams = ['$http', '$q', '$localStorage', '$base64'];\n\nvar factory = function ($http, $q, $localStorage, $base64) {\n\n    factory = {};\n\n    // Utilizada para obtener cualquier array desde el $localStorage.backend\n    // url: parametro que especifica el recurso que se desea consumir de la API\n    // include: si se desean incluir parametros adicionales\n    factory.getAll = function (url, include) {\n\n        // Se inicia la promesa\n        var defered = $q.defer();\n        var promise = defered.promise;\n\n        var hasPage = url.indexOf('page') !== -1;\n        if (include) {\n            include = hasPage ? '&include=' + include : '?include=' + include;\n        } else {\n            include = '';\n        }\n\n        // Si no se desea pasar como parametros el token de usuario se comenta la siguiente linea\n        $http.defaults.headers.common['Authorization'] = $localStorage.token;\n        $http.get($localStorage.backend + url + include)\n            .success(function (results) {\n                defered.resolve(results);\n            })\n            .error(function (err) {\n                defered.reject(err);\n            });\n\n        return promise;\n    };\n\n    // Obtiene un objeto json en especifico dado un id\n    factory.getOne = function (id, url, include) {\n\n        var defered = $q.defer();\n        var promise = defered.promise;\n\n        if (include) {\n            include = '?include=' + include;\n        } else {\n            include = '';\n        }\n\n        url = url + \"/\";\n\n        $http.defaults.headers.common['Authorization'] = $localStorage.token;\n        $http.get($localStorage.backend + url + id + include)\n            .success(function (results) {\n                defered.resolve(results);\n            })\n            .error(function (err) {\n                defered.reject(err);\n            });\n\n        return promise;\n    };\n\n    // Solicita eliminar un registro dado un id a la API\n    factory.remove = function (id, url) {\n\n        var defered = $q.defer();\n        var promise = defered.promise;\n\n        url = url + \"/\";\n\n        $http.defaults.headers.common['Authorization'] = $localStorage.token;\n        $http.delete($localStorage.backend + url + id)\n            .success(function (status) {\n                defered.resolve(status.data);\n                //project.id = results.data.id;\n                //return results.data;\n            })\n            .error(function (err) {\n                defered.reject(err);\n            });\n\n        return promise;\n\n    };\n\n    factory.removeMany = function (ids, url) {\n\n        var defered = $q.defer();\n        var promise = defered.promise;\n\n        $http.defaults.headers.common['Authorization'] = $localStorage.token;\n        $http.delete($localStorage.backend + url + '/id/' + ids)\n            .success(function (status) {\n                defered.resolve(status.data);\n                //project.id = results.data.id;\n                //return results.data;\n            })\n            .error(function (err) {\n                defered.reject(err);\n            });\n\n        return promise;\n\n    };\n\n    // Solicita a la API guardar un objeto json\n    factory.save = function (object, url) {\n\n        var defered = $q.defer();\n        var promise = defered.promise;\n\n        $http.defaults.headers.common['Authorization'] = $localStorage.token;\n        $http.post($localStorage.backend + url, object)\n            .success(function (results) {\n                defered.resolve(results);\n\n            })\n            .error(function (err) {\n                defered.reject(err);\n            });\n\n        return promise;\n\n    };\n\n    // Solicita a la API guardar un objeto json\n    factory.create = function (object, url) {\n\n        var defered = $q.defer();\n        var promise = defered.promise;\n\n        $http.defaults.headers.common['Authorization'] = $localStorage.token;\n        $http.post($localStorage.backend + url, object)\n            .success(function (results) {\n                defered.resolve(results);\n\n            })\n            .error(function (err) {\n                defered.reject(err);\n            });\n\n        return promise;\n\n    };\n\n    // Solicita a la API actualizar un objeto json dado un id\n    factory.update = function (id, object, url) {\n\n        var defered = $q.defer();\n        var promise = defered.promise;\n\n        url = url + \"/\";\n\n        $http.defaults.headers.common['Authorization'] = $localStorage.token;\n        $http.put($localStorage.backend + url + id, object)\n            .success(function (results) {\n                defered.resolve(results);\n\n            })\n            .error(function (err) {\n                defered.reject(err);\n            });\n\n        return promise;\n\n    };\n\n    factory.uploadFile = function (url, file) {\n        var defered = $q.defer();\n        var promise = defered.promise;\n\n        var formData = new FormData();\n\n        formData.append(\"file\", file);\n\n        return $http.post($localStorage.backend + url, formData, {\n            headers: {\n                \"Content-type\": undefined\n            },\n            transformRequest: formData\n        })\n            .success(function (res) {\n                defered.resolve(res);\n            })\n            .error(function (msg, code) {\n                defered.reject(msg);\n            })\n\n        return promise;\n    }\n\n    return factory;\n\n};\n\nfactory.$inject = injectParams;\n\napp.factory('apiService', factory);\n","/**\n * Created by pedrogorrin on 22/9/16.\n */\n","angular.module('app')\n    .controller('listarTrabajadoresCtrl', [function () {\n        var listarVm = this\n    }]);","/**\n * Created by pedrogorrin on 22/9/16.\n */\n"],"sourceRoot":"/source/"}